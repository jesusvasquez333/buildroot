*** linux-3.18.9/arch/arm/mach-zynq/slcr.c.orig	2015-03-09 18:39:34.290841959 -0700
--- linux-3.18.9/arch/arm/mach-zynq/slcr.c	2015-03-09 18:39:53.046312436 -0700
***************
*** 24,32 ****
--- 24,34 ----
  /* register offsets */
  #define SLCR_UNLOCK_OFFSET		0x8   /* SCLR unlock register */
  #define SLCR_PS_RST_CTRL_OFFSET		0x200 /* PS Software Reset Control */
+ #define SLCR_FPGA_RST_CTRL_OFFSET	0x240 /* FPGA Software Reset Control */
  #define SLCR_A9_CPU_RST_CTRL_OFFSET	0x244 /* CPU Software Reset Control */
  #define SLCR_REBOOT_STATUS_OFFSET	0x258 /* PS Reboot Status */
  #define SLCR_PSS_IDCODE			0x530 /* PS IDCODE */
+ #define SLCR_LVL_SHFTR_EN_OFFSET	0x900 /* Level Shifters Enable */
  
  #define SLCR_UNLOCK_MAGIC		0xDF0D
  #define SLCR_A9_CPU_CLKSTOP		0x10
***************
*** 126,131 ****
--- 128,164 ----
  }
  
  /**
+  * zynq_slcr_init_preload_fpga - Disable communication from the PL to PS.
+  */
+ void zynq_slcr_init_preload_fpga(void)
+ {
+ 	/* Assert FPGA top level output resets */
+ 	writel(0xF, zynq_slcr_base + SLCR_FPGA_RST_CTRL_OFFSET);
+ 
+ 	/* Disable level shifters */
+ 	writel(0, zynq_slcr_base + SLCR_LVL_SHFTR_EN_OFFSET);
+ 
+ 	/* Enable output level shifters */
+ 	writel(0xA, zynq_slcr_base + SLCR_LVL_SHFTR_EN_OFFSET);
+ }
+ EXPORT_SYMBOL(zynq_slcr_init_preload_fpga);
+ 
+ /**
+  * zynq_slcr_init_postload_fpga - Re-enable communication from the PL to PS.
+  */
+ void zynq_slcr_init_postload_fpga(void)
+ {
+ 	/* Enable level shifters */
+ 	writel(0xf, zynq_slcr_base + SLCR_LVL_SHFTR_EN_OFFSET);
+ 
+ 	/* Deassert AXI interface resets */
+ 	writel(0, zynq_slcr_base + SLCR_FPGA_RST_CTRL_OFFSET);
+ }
+ EXPORT_SYMBOL(zynq_slcr_init_postload_fpga);
+ 
+ 
+ 
+ /**
   * zynq_slcr_cpu_start - Start cpu
   * @cpu:	cpu number
   */
*** linux-3.18.9/arch/arm/mach-zynq/common.h.orig	2015-03-06 14:53:42.000000000 -0800
--- linux-3.18.9/arch/arm/mach-zynq/common.h	2015-03-09 17:43:51.438413052 -0700
***************
*** 27,32 ****
--- 27,34 ----
  extern bool zynq_slcr_cpu_state_read(int cpu);
  extern void zynq_slcr_cpu_state_write(int cpu, bool die);
  extern u32 zynq_slcr_get_device_id(void);
+ extern void zynq_slcr_init_preload_fpga(void);
+ extern void zynq_slcr_init_postload_fpga(void);
  
  #ifdef CONFIG_SMP
  extern void secondary_startup(void);
